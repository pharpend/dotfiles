#!/usr/bin/ruby
# -*- mode: Ruby -*-

require 'yaml'
require 'optparse'
require 'ostruct'
require 'pp'
require 'time'

clockfile = File.expand_path "~/.clock.yaml"
clk = YAML.load_file clockfile
options = {}
OptionParser.new do |opts|
  opts.on("-s", "--status", "Status") do
    options[:mode] = "status"
  end

  opts.on("-i", "--clock-in PROJECT", String, "Clock in") do |p|
    options[:mode] = "in"
    options[:project] = p
  end

  opts.on("-o", "--clock-out PROJECT", "Clock out") do |p|
    options[:mode] = "out"
    options[:project] = p
  end

  opts.on("-l", "--list-projects", "list projects") do
    options[:mode] = "list"
  end

  opts.on("-S", "--sum [DATE]", "Sum of hours since DATE") do |d|
    options[:mode] = "sum"

    options[:since] = if d then Time.parse d else Time.mktime(0) end

    opts.on("-w", "--wage WAGE", Float, "Calculate earnings with given hourly wage") do |rate|
      options[:wage] = rate
    end
  end
end.parse!

if "list" == options[:mode]
  pp clk.keys
elsif "status" == options[:mode]
  clk.each do |prj,entries|
    puts "Project: #{prj}"
    current_project = entries
    if current_project.empty?
      puts "no entries in project"
    else
      last_entry = current_project[-1]
      if last_entry.has_key? "out"
        clockout_time = Time.parse(last_entry["out"])
        clockout_time_s = clockout_time.strftime("%a %b %-d %Y at %-I:%M %p %Z")
        puts "last clocked out at #{clockout_time_s}"
      else
        clockin_time = Time.parse last_entry["in"]
        clockin_time_s = clockin_time.strftime("%A, %B %-d, %Y at %-I:%M %p %Z")
        puts "clocked in at #{clockin_time_s}"
      end
    end
  end
elsif "sum" == options[:mode]
  clk.each do |prj, entries|
    puts "Project: #{prj}"
    relevant_entries = entries.select { |e| Time.parse(e["in"]) >= options[:since] }
    total_hours = 0
    relevant_entries.each do |ety|
      start_time = Time.parse ety["in"]
      end_time = if ety["out"] then Time.parse ety["out"] else Time.now end
      hours_worked = (end_time - start_time)/3600
      total_hours += hours_worked
      print "  #{start_time.strftime("%a %b %-d %Y")}: %04.2f hours" % hours_worked
      if options[:wage]
        money_earned = hours_worked * options[:wage]
        print ", Earnings: $%04.2f\n" % money_earned
      else
        print "\n"
      end
    end

    puts "  Total hours: %04.2f" % total_hours
    puts "  Total earnings: $%04.2f" % (total_hours * options[:wage]) if options[:wage]
  end
# If we're not listing projects, we need a project
# If it's not specified, fail
elsif not options.has_key? :project
  fail "must specify project with -p\nprojects: #{clk.keys}"
# If the project is specified but does not exist: fail
elsif not clk.has_key? options[:project]
  fail "no such project: #{options[:project]}\nprojects: #{clk.keys}"
# If the project exists
else
  # If the project exists, check mode
  current_project_name = options[:project]
  current_project = clk[current_project_name]
  case options[:mode]
  when "in"
    already_clocked_in = (not current_project.empty?) && (not current_project[-1].has_key? "out")
    if already_clocked_in
      fail "already clocked in"
    else
      clk[current_project_name] << {"in" => Time.now.to_s}
      puts "clocked in"
    end
  when "out"
    already_clocked_out = (current_project.empty?) || (current_project[-1].has_key? "out")
    if already_clocked_out
      fail "already clocked out"
    else
      clk[current_project_name][-1]["out"] = Time.now.to_s
      puts "clocked out"
    end
  end
end
File.write(clockfile, YAML.dump(clk))
