#!/usr/bin/env ruby
# -*- mode: Ruby -*-
# 
# gmail-notifyd - a Gmail notifier
# Version 0.3, 2014-09-29
# Copyright (c) 2014 Peter Harpending. <pharpend2@gmail.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 
# INSTRUCTIONS
# 
# 1. You need to install the gems "ruby-gmail", "libnotify", and "parseconfig".
# 
# 2. You need to populate the file ~/.gmail.conf to make it look, at a minimum,
# something like this:
# 
#   email = myusername@gmail.com
#   password = mypassword
# 
# Replace 10 with the number of minutes you want the script to check for
# email. You can get the value of MYHOSTNAME by typing "hostname" in the
# terminal.
# 
# 3. Make the script executable with "chmod +x /path/to/gmail-notifyd"
# 
# 4. Run the script with "/path/to/gmail-notifyd".
# 
# CHANGES
# 
# v.0.1   - Introduce versions, miscellaneous code cleanups.
# v.0.1.1 - Introduce status file.
# v.0.2   - Remove some options from gmail.conf.
# v.0.3   - Fix the timing bug, and the debug bug
# 
# TODO
# 
# - Move this project to its own repository.
# - Separate library, daemon, and client
# 
# DESCRIPTION
# 
# Every so often, this program checks to see if there are new messages in a
# Gmail inbox. If so, it sends a desktop notification. It will also output the
# number of new messages to a file.
# 
# This is a terrible Ruby script, and is thus likely to break. You can always
# get the latest version from
# https://github.com/pharpend/dotfiles/tree/master/bin/gmail-notifyd
#
# This has been tested on Gentoo GNU/Linux, last updated 29 Sept 2014
# 
# You can edit some global parameters here.

DEBUG          = false
FORK           = true
INTERVAL       = 10
NOTIFY         = true
PARAM_EMAIL    = "email"
PARAM_PASSWORD = "password"
PATH_CONFIG    = "~/.gmail.conf"
PATH_MAILNUM   = "~/.mailnum"
PATH_STATUS    = "~/.gmail.status.json"

require 'gmail'
require 'json'
require 'libnotify'
require 'parseconfig'

pc = ParseConfig.new(File.expand_path(PATH_CONFIG))

def checkmail
  while true
    $pc = ParseConfig.new(File.expand_path(PATH_CONFIG))
    $email = $pc.params[PARAM_EMAIL]
    $pwd = $pc.params[PARAM_PASSWORD]

    $notes = []
    Gmail.new($email, $pwd) do |gmail|
      gmail.inbox.emails(:unread).each do |msg| 
        rfc_body = msg.message.to_s
        from = rfc_body.scan(/From:([^\<]+)/)[0][0].strip
        subj = rfc_body.scan(/Subject:([^\n]+)/)[0][0].strip
        $notes << {:from => from, :subject => subj}
        msg.mark(:unread)
      end
    end

    $notes_interp = $notes.map { |n| "\n<b>From:</b> #{n[:from]}\n<b>Subject:</b> #{n[:subject]}" }.join("\n")

    File.open(File.expand_path(PATH_MAILNUM), 'w') do |f| 
      f.write($notes.length.to_s)
    end

    File.open File.expand_path(PATH_STATUS), 'w' do |f|
      status = {
        last_checked: Time.now.to_s,
        notify: NOTIFY,
        mailnum_last: $notes.length,
        path_mailnum: PATH_MAILNUM,
        interval_seconds: (INTERVAL*60).to_i,
      }
      json_status = JSON.pretty_generate(status) + "\n"
      f.write(json_status)
      if DEBUG
        STDOUT.write(json_status)
      end
    end

    if NOTIFY
      case $notes.length
        when 0
          nil
        when 1
          notified=true
          Libnotify.show(:summary => "1 New email", :body => $notes_interp, :urgency => :normal)
        else
          notified=true
          Libnotify.show(:summary => "#{$notes.length} new emails", :body => $notes_interp, :urgency => :normal)
      end
    end
    sleep((INTERVAL * 60).to_i)
  end
end

if FORK then
  fork {checkmail}
else 
  checkmail
end
